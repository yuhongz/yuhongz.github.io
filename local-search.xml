<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>递归与排序</title>
    <link href="/2020/03/07/%E9%80%92%E5%BD%92%E4%B8%8E%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/03/07/%E9%80%92%E5%BD%92%E4%B8%8E%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="🌟递归"><a href="#🌟递归" class="headerlink" title="🌟递归"></a>🌟递归</h3><p>递归，是一种编程技巧，可以让代码更简洁。</p><ul><li>递归的三个条件：<ul><li>一个问题可以分解成几个子问题的解</li><li>问题与子问题除了数据规模不一样，求解思路完全一样</li><li>存在递归终止条件</li></ul></li></ul><h3 id="🌟排序"><a href="#🌟排序" class="headerlink" title="🌟排序"></a>🌟排序</h3><p><img src="/2020/03/07/%E9%80%92%E5%BD%92%E4%B8%8E%E6%8E%92%E5%BA%8F/zhangyuhong/Desktop/blog/bloger/source/_posts/%E9%80%92%E5%BD%92%E4%B8%8E%E6%8E%92%E5%BA%8F/overview.jpg" srcset="/img/loading.gif" alt="overview"></p><ul><li><strong>稳定性</strong>：作用：在针对某一key进行排序的过程中，保证其他key有序</li><li><strong>逆序度</strong>：<strong>满有序度 - 有序度</strong>。冒泡和插入的实际交换次数都是等于逆序度 。因此其平均时间复杂度为o(n2)</li></ul><hr><h4 id="1-插入排序"><a href="#1-插入排序" class="headerlink" title="1.插入排序"></a>1.插入排序</h4><p>原地排序、稳定、最好时间复杂度o(n)，最差o(n2)，平均o(n2)。与数组的插入一致，有数据的搬移。插入排序的优化<strong>希尔排序</strong>。</p><h4 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2.冒泡排序"></a>2.冒泡排序</h4><p>原地排序、稳定、最好时间复杂度o(n)，最差o(n2)，平均o(n2)。<strong>比插入排序要差</strong>，虽然交换次数一致，但冒泡每次需要3个赋值语句。</p><h4 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3.选择排序"></a>3.选择排序</h4><p>原地排序、<strong>不稳定</strong>、最好时间复杂度o(n2)，最差o(n2)，平均o(n2)。</p><hr><p>//适合大规模的数据排序方法，快排和并归都用到了分治的思想，也用到了递归。<strong>分治是一种解决问题的处理思想，递归是一种编程技巧</strong>。</p><h4 id="4-并归排序"><a href="#4-并归排序" class="headerlink" title="4.并归排序"></a>4.并归排序</h4><pre><code class="js">function mergeSort(A, n){    mergeSort_c(A, 0, n-1);}function mergeSort_c(A, i, j){    if(i &gt;= j) return;    var mid = Math.floor((i + j)/2);    mergeSort_c(A, i, mid);    mergeSort_c(A, mid+1, j);    merge(A, i, mid, j);}function merge(A, i, mid, j){    var temp = [];    var p = i,        q = mid+1;    while(p &lt;= mid &amp;&amp; q &lt;= j){        if(A[p] &gt; A[q]){            temp.push(A[p]);            p += 1;        }        if(A[p] &lt;= A[q]){            temp.push(A[q]);            q += 1;        }    }    if(p &gt; mid){        for(; q&lt;=j; q++) temp.push(A[q])    }    if(q &gt; j){        for(; p&lt;=mid; p++) temp.push(A[p])    }    for(var t = i; t &lt;= j; t ++){        A[t] = temp.shift();    }}</code></pre><p><strong>优点：时间复杂度</strong>：最好，最坏，平均都是o(nlgn)。每次合并有序数组的平均时间复杂度为o(n)，所以可以<strong>利用递归的递推公式</strong>将时间复杂度也分解：</p><pre><code>T(n) = 2*T(n/2) + n     = 2*(2*T(n/4) + n/2) + n = 4*T(n/4) + 2*n     = 4*(2*T(n/8) + n/4) + 2*n = 8*T(n/8) + 3*n     = 8*(2*T(n/16) + n/8) + 3*n = 16*T(n/16) + 4*n     ......     = 2^k * T(n/2^k) + k * n     ......</code></pre><p>当n/2^k=1时，T(n) = Cn+nlog2n。</p><p>我理解的是，分层后每层的合并的时间复杂度为o(n)，分了logn层。</p><p><strong>缺点：空间复杂度</strong>：o(n)，非o(nlogn)，空间会释放，cpu一次只执行一个函数，最大就是n。<strong>由于merge函数无法原地执行。</strong></p><h4 id="5-快排"><a href="#5-快排" class="headerlink" title="5.快排"></a>5.快排</h4><ul><li><strong>特点</strong>：不稳定，原地排序，最好和平均复杂度为o(nlogn)，<strong>递推公式与并归一致</strong>，大部分情况下能做到平均情况，<strong>极端情况下退化到</strong>o(n2)。</li><li>原地排序实现：</li></ul><pre><code class="js">function quickSort(A, n){    quickSort_c(A, 0, n-1);}function quickSort_c(A, i, j){        if(i &gt;= j) return;        var p = partition(A, i, j);        quickSort_c(A, i, p-1);// p-1非p        quickSort_c(A, p+1, j);}function partition(A, i, j){    var pivot = A[j];    var q = i; //var q, p = i 这种写法是错误的。    var temp;    for(var p = i; p &lt;= j-1; p++){         if(A[p] &lt; pivot){            temp = A[p];            A[p] = A[q];            A[q] = temp;            q+=1;        }    }    A[j] = A[q];    A[q] = pivot;    return q;}</code></pre><ul><li>🌟<strong>快排应用：o(n)复杂度寻找数组內第k大的数据</strong>：每次划分找到pivot，判断pivot是否等于k+1，等于则返回找到，否则，继续在可能的区间划分。时间复杂度 n + n/2 + n/4+ … 1 = 2n -1 </li><li></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法, 学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表</title>
    <link href="/2020/03/05/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/2020/03/05/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="🌟基础线性表：数组"><a href="#🌟基础线性表：数组" class="headerlink" title="🌟基础线性表：数组"></a>🌟基础线性表：数组</h3><ul><li><strong>特点</strong><ul><li>连续内存空间</li><li>随机访问（非随机查找），可根据寻址公式直接找到对应的内存空间。（a[i]_address = base_address + i * data_type_size，这个公式解释了为什么从0开始）</li><li>申请只能固定的空间</li></ul></li><li>低效的插入和删除：插入和删除的平均时间复杂度为o(n），需迁移数据</li><li><strong>动态扩容</strong>：插入时，如超出数组长度时添加数据申请新的空间（如1.5倍长度），并进行数据迁移。使用平摊时间复杂度可以计算得平均时间复杂度o(1)。</li><li>在c语言中警惕数组越界</li><li><strong>容器</strong>：高级编程语言中一般有高级的容器来表示数组，如js中的list，但其封装好了如动态扩容和一系列底层函数。但js中的list是连续的空间吗？</li></ul><h3 id="🌟基础线性表：链表"><a href="#🌟基础线性表：链表" class="headerlink" title="🌟基础线性表：链表"></a>🌟基础线性表：链表</h3><ul><li><p><strong>特点</strong></p><ul><li>动态的空间分配</li><li>不支持随机访问，需要遍历</li></ul></li><li><p><strong>单链表</strong>：头节点、data+next、最后一个节点的next为null，其插入和删除的时间复杂度为o(1)，访问时间复杂度为o(n)</p></li><li><p><strong>循环链表</strong>：在单链表的基础上，最后一个极点的next也指向头节点。应用：约瑟夫问题。</p></li><li><p><strong>双向链表</strong>：头节点、pre+data+next。其插入和删除时间复杂度为o(1)，虽然单链表也是o(1)，但是对于特定的删除和插入，如删除给定指针指向的节点，需要找到其前面的节点，双向链表更优。更大的空间消耗，更小的时间损失，空间换时间。</p></li><li><p><strong>双向循环链表</strong></p></li><li><p>基于单链表实现LRU算法：</p><ul><li>维持一个有序的单链表，越久访问的节点在越尾部</li><li>当有新节点加入时，从头遍历链表，如存在，则删除，并插入到头部</li><li>如不存在：<ul><li>如有空间，插入到头部</li><li>如无空间，删除尾节点后插入到头部</li></ul></li></ul></li><li><p>基本链表操作：</p><pre><code class="js">class Node(n){    this.data = n;    this.next = null;}\\链表反转function reverse(head){    var p = head;    var res = null;    var temp;    while(p){        temp = p.next;        p.next = res;        res = p;        p = temp;    }    return res;}\\链表的环的检测 \\1 快慢指针function ringCheck(head){    var fast, slow = head;    while(fast.next &amp;&amp; fast.next.next &amp;&amp; slow.next){        fast = fast.next.next;        slow = slow.next;        if(fast == slow) return true;    }    return false;}\\2 创建哈希表function ringCheck(head){    var hash = new Set();    while(head){        if(hash.has(head)){            return true;        }        else{            hash.add(head);            head = head.next;        }    }    return false;}\\3 添加访问标记function ringCheck(head){    while(head){        if(head.isVisit) return true;        else{            head.isVisit = 1;            head = head.next;        }    }}\\两个有序链表的合并\\删除链表倒数第n个：快慢指针\\求链表的中点：快慢指针</code></pre></li></ul><h3 id="🌟受限线性表：栈"><a href="#🌟受限线性表：栈" class="headerlink" title="🌟受限线性表：栈"></a>🌟受限线性表：栈</h3><ul><li>基于数组实现：顺序栈。入栈可能涉及到数组迁移，最坏时间复杂度o(n)，平摊还是o(1)</li><li>基于链表实现：链式栈。出入栈都为o(1)</li><li>栈的使用场景：<ul><li>函数调用栈</li><li>表达式求值：<ul><li>创立数字栈和运算符栈</li><li>遍历表达式，分别入两个栈</li><li>运算符入栈时需要和栈顶的运算符比较，如更高，则入栈，等于或低则出栈，取数字栈两个数字计算，结果压入数字栈</li><li>继续比较</li></ul></li><li>浏览器前进和回退，使用两个栈</li></ul></li></ul><h3 id="🌟受限线性表：队列"><a href="#🌟受限线性表：队列" class="headerlink" title="🌟受限线性表：队列"></a>🌟受限线性表：队列</h3><ul><li>基于数组实现：顺序队列</li><li>基于链表实现：链式队列</li><li>两个指针：head指针和tail指针，入队列和出队列，head和tail都向后移动。在顺序队列中也涉及到数据迁移。head指向头，tail指向最后一个元素后一位。<strong>队列空</strong>：head == tail。</li><li><strong>循环队列</strong>：一种特殊的顺序队列，队空条件为head == tail，队满条件为：(tail+1)%n == head。</li><li></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法, 学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法复杂度分析</title>
    <link href="/2020/02/29/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
    <url>/2020/02/29/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本科时学习的数据结构与算法的知识日渐淡忘，恰逢春招面试需要复习，要命的是我又是个如果对什么记忆模糊就会啥也说不出来的人，毕竟没有把握的事情，没有办法信誓旦旦的说个123，因此重新温习一遍在极客时间上买的王争的课程，梳理知识体系，也为以后更轻松的复习。</p><h3 id="why-为什么要复杂度分析"><a href="#why-为什么要复杂度分析" class="headerlink" title="why- 为什么要复杂度分析"></a>why- 为什么要复杂度分析</h3><p>计算机资源是宝贵的，虽然可以用事后统计法来计算精确的时间，但是缺点有：</p><ul><li>依赖硬件条件，硬件条件有优劣</li><li>结果受数据规模影响</li></ul><p>复杂度分析：</p><ul><li>和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。</li><li>掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。</li></ul><h3 id="what-什么是复杂度分析"><a href="#what-什么是复杂度分析" class="headerlink" title="what- 什么是复杂度分析"></a>what- 什么是复杂度分析</h3><ul><li>数据结构与算法帮助计算机使用更快的时间、更省空间来解决问题</li><li>时间复杂度和空间复杂度分别从两个方面来估计消耗，实质是时间/空间消耗随着数据规模增长的变化趋势</li></ul><h3 id="how-怎么做复杂度分析"><a href="#how-怎么做复杂度分析" class="headerlink" title="how- 怎么做复杂度分析"></a>how- 怎么做复杂度分析</h3><h4 id="1-大O表示法"><a href="#1-大O表示法" class="headerlink" title="1.大O表示法"></a>1.大O表示法</h4><p>O()不是表示真实的代码执行时间，而是表示代码执行时间随数据规模增长的变化趋势，也称<strong>渐进时间复杂度</strong>，简称<strong>时间复杂度</strong>。</p><p>####2.分析的三个方法</p><ul><li>只关注循环执行次数最多的一段代码</li><li>加法：几段代码组合中取最高量级的复杂度</li><li>乘法：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li></ul><h4 id="3-常见的复杂度"><a href="#3-常见的复杂度" class="headerlink" title="3.常见的复杂度"></a>3.常见的复杂度</h4><ul><li>多项式阶，呈多项式比例增长: o(1), o(logn), o(n), o(nlogn), o(n^x)</li><li>非多项式阶，随数据暴增，性能极差：o(2^n)，o(n!)</li><li>常见的空间复杂度：O(1)、O(n)、O(n2)。</li></ul><h4 id="4-最好、最差和平均复杂度"><a href="#4-最好、最差和平均复杂度" class="headerlink" title="4.最好、最差和平均复杂度"></a>4.最好、最差和平均复杂度</h4><ul><li>最好最差顾名思义</li><li>平均复杂度可用加权平均数求量级，也可以使用均摊的方式快速求。如一次o(n)的操作紧跟着n-1次o(1)操作，平均还是o(1)。</li></ul><p>//关于空间复杂度，是指额外需要使用的空间，数据结构本身带的空间不纳入计算</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法,  学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/02/29/hello-world/"/>
    <url>/2020/02/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
